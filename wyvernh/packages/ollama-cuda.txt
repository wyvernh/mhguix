(define-module (ollama-cuda)
  #:use-module (guix packages)
  #:use-module (guix git-download)
  #:use-module (guix build-system go)
  #:use-module (guix build-system gnu) ; For patchelf and other utilities
  #:use-module (guix build-system trivial) ; Potentially for custom build steps
  #:use-module (guix utils)
  #:use-module (guix licenses)
  #:use-module (gnu packages)
  #:use-module (gnu packages build-tools) ; For make, pkg-config
  #:use-module (gnu packages compression) ; For xz, tar
  #:use-module (gnu packages curl)
  #:use-module (gnu packages git)
  #:use-module (gnu packages linux) ; For glibc-locales for some locales
  #:use-module (gnu packages lsp) ; For some utilities if needed
  #:use-module (gnu packages rust) ; Ollama has some Rust dependencies
  #:use-module (gnu packages go) ; Specific Go version
  #:use-module (gnu packages python-xyz) ; For some build scripts
  #:use-module (gnu packages elf) ; For patchelf
  #:use-module (guix-science-nonfree cuda) ; From guix-science-nonfree channel
  #:use-module (guix-science-nonfree cudnn) ; From guix-science-nonfree channel
  #:use-module (guix-science-nonfree cuda-drivers) ; From guix-science-nonfree channel
  )

(define-public ollama-cuda
  (package
    (name "ollama-cuda")
    (version "0.1.41") ; Please update to the latest stable Ollama version
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/ollama/ollama.git")
                    (commit (string-append "v" version))))
              (file-name (string-append name "-" version "-checkout"))
              (sha256
               (base32 "0d4i64v96ss2k0129k9vjcrv36f52s6s72m8x6r3h615b88l0p41")) ; **UPDATE THIS SHA256**
              (modules (list git-download))
              (snippet
               ;; Ollama typically uses 'go generate' which might involve
               ;; downloading tools or assets.
               ;; This snippet handles updating submodules if required for the build,
               ;; though Go modules are usually self-contained.
               (begin
                 (when (file-exists? "go.mod")
                   (format #t "Running go mod tidy for ~a~%" (getcwd))
                   (invoke "go" "mod" "tidy"))))))
    (build-system go-build-system) ; Use the Go build system
    (inputs
     `(("go" ,go-1-22) ; Specify a recent Go version
       ("git" ,git)
       ("make" ,make)
       ("patchelf" ,patchelf) ; For fixing RPATHs if necessary
       ("pkg-config" ,pkg-config)
       ("curl" ,curl) ; Often needed for fetching during build/runtime
       ("rust" ,rust) ; Ollama uses some Rust components
       ("llvm" ,llvm) ; Some parts might use LLVM for GPU compilation
       ("libxcrypt" ,libxcrypt) ; Common dependency
       ("glibc-locales" ,glibc-locales) ; For locale support
       ))
    (propagated-inputs
     ;; These dependencies are needed at runtime for Ollama with CUDA.
     ;; They are typically linked dynamically.
     `(("cuda" ,cuda)
       ("cudnn" ,cudnn)
       ("cuda-drivers" ,cuda-drivers))) ; Essential for NVIDIA GPU functionality

    (arguments
     (list
      ;; Pass build tags to enable CUDA support.
      ;; Ollama uses `TAGS=cuda` or similar for CUDA builds.
      (string-append "--build-flags=--tags=cuda")
      ;; Ensure the build system knows about CUDA library paths.
      ;; This is often handled by 'go-build-system' if inputs are propagated.
      ;; However, explicitly setting CGO_CFLAGS and CGO_LDFLAGS can help.
      (string-append
       "--set-build-handler="
       "(lambda* (#:key source inputs native-inputs outputs go-path go-build-flags #:allow-other-keys)
         (let* ((out (assoc-ref outputs \"out\"))
                (go (assoc-ref inputs \"go\"))
                (cuda (assoc-ref inputs \"cuda\"))
                (cudnn (assoc-ref inputs \"cudnn\")))
           (setenv \"CGO_ENABLED\" \"1\")
           (setenv \"GO111MODULE\" \"on\")
           (setenv \"PATH\" (string-append (assoc-ref go \"bin\") \":\" (getenv \"PATH\")))

           ;; Set CUDA-related environment variables for the Go compiler
           (setenv \"CGO_CFLAGS\" (string-append
                                   \"-I\" (assoc-ref cuda \"include\")
                                   \" -I\" (assoc-ref cudnn \"include\")))
           (setenv \"CGO_LDFLAGS\" (string-append
                                    \"-L\" (assoc-ref cuda \"lib\")
                                    \" -L\" (assoc-ref cudnn \"lib\")
                                    \" -lcuda -lcudart -lcublas -lcudnn\")) ; Link necessary CUDA/cuDNN libraries

           (with-directory source
             ;; Ollama's build process for CUDA usually involves `make` or `go generate`
             ;; followed by `go build`. The `llm/llama.cpp` part might be key.
             (format #t \"Building Ollama with CUDA support~%\")
             (system* \"go\" \"generate\" \"./llm/...") ; Might need specific generate command
             (system* \"go\" \"build\" \"-mod=readonly\"
                      \"-tags=cuda\" ; Explicitly pass the CUDA tag
                      \"-v\" \"-ldflags=-s -w\" ; Strip debug info for smaller binary
                      \"-o\" (string-append out \"/bin/ollama\")
                      \"./...") ; Path to the main Ollama package, often "." or "./cmd/ollama"
             )
           (format #t \"Applying patchelf to Ollama binary~%\")
           (let* ((ollama-bin (string-append out \"/bin/ollama\")))
             (when (file-exists? ollama-bin)
               (setenv \"NIX_ENFORCE_PURITY\" \"0\") ; Temporarily disable purity for RPATH modification
               (system* \"patchelf\" \"--add-rpath\"
                        (string-append (assoc-ref cuda \"lib\") \":\"
                                       (assoc-ref cudnn \"lib\"))
                        ollama-bin)
               (system* \"patchelf\" \"--shrink-rpath\" ollama-bin)
               (setenv \"NIX_ENFORCE_PURITY\" \"1\")) ; Re-enable purity
             ))))))
    (description
     "Ollama allows you to run open-source large language models (LLMs) locally.
This package includes CUDA support for NVIDIA GPUs, leveraging the proprietary
NVIDIA libraries provided by the 'guix-science-nonfree' channel.")
    (license license:apache2.0))) ; Ollama is Apache 2.0 licensed
