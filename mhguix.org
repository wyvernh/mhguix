* The MHGuix Channel

** Purpose
The MHGuix channel provides certain packages and configurations for programs that I use.
But more importantly, the MHGuix channel contains a fully abstracted configuration system
to build and deploy Guix systems. These abstractions work in tandem with MHDisk to provide
disk partitioning configuration. A full operating system, complete with user accounts and
potentially multiple home environments along with its partition table, is described in a
single 20-ish line scheme file in the ~wyvernh/systems~ directory.

Like any abstraction, those in the MHGuix channel are specifically designed for my usecase.
As my computer use changes, more services or packages may be added. For personal
customisation, it is possible to use a forked version of MHGuix with the original MHDisk
thanks to the fact MHDisk is channel agnostic.

This will include a sway configuration in guile scheme using guile-swayer


* Modules

This is the core of the configuration system. There are two main modules: ~(wyvernh modules
home)~ and ~(wyvernh modules system)~. Both of these modules make use of some basic
procedures in ~tools.scm~:

#+begin_src scheme :tangle ./wyvernh/modules/tools.scm
  (define-module (wyvernh modules tools)
    #:use-module (srfi srfi-1))

  (define-public (eval-map lst environment)
    (map (lambda (datum) (eval datum environment)) lst))

  (define-public (eval-reduce lst environment)
    (fold append '() (eval-map lst environment)))

  (define-public (remove-false lst)
    (filter (lambda (e) e) lst))
#+end_src

** Home
~(wyvernh modules home)~ is a module that provides a home environment object and in
particular the public procedure ~home-config~ that is used to configure home environments.

We export the object ~home~ so that a user of the configuration system gets a default home
environment in the circumstance that they do not call ~home-config~.
#+begin_src scheme :tangle ./wyvernh/modules/home.scm
  (define-module (wyvernh modules home)
    #:use-module (wyvernh modules tools)
    #:use-module (wyvernh modules home packages)
    #:use-module (wyvernh modules home services)
    #:use-module (gnu home)
    #:export (home home-config))

  (define default-packages '(core desktop wyvernh latex emacs engineering programming))
  (define default-services '(desktop programming shepherd emacs))

  (define home #f)

  ;; returns home so that it may be assigned to additional
  ;; home data structures corresponding to different users
  (define home-config
    (lambda*
     (#:key (packages default-packages) (services default-services))
     (set! home (home-environment
                 (packages (eval-reduce packages packages-environment))
                 (services (eval-reduce services services-environment))))
     home))

  (home-config)
#+end_src

*** Home Packages
This module provides a list of package sets to be used by ~home-config~. These sets of
packages are bound to variables in the module that are not exported. How could this
possibly be useful for configuration? Here we use the dynamic code evaluation power of
scheme and provide to ~home-config~ a /list of quoted symbols/. These symbols are then
evaluated in the home packages module by way of ~eval-reduce~ from ~tools.scm~.

First we define the module:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  (define-module (wyvernh modules home packages)
#+end_src

Now we import some package definitions.

For our core packages:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for core packages
  #:use-module (gnu packages admin)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages ssh)
  #:use-module (gnu packages tls)
  #:use-module (gnu packages networking)
  #:use-module (gnu packages text-editors)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages patchutils)

#+end_src

For desktop packages:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for desktop packages
  #:use-module (gnu packages android)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages cups)
  #:use-module (gnu packages fonts)
  #:use-module (gnu packages fontutils)
  #:use-module (gnu packages freedesktop)
  #:use-module (gnu packages gimp)
  #:use-module (gnu packages graphics)
  #:use-module (gnu packages gtk)
  #:use-module (gnu packages hardware)
  #:use-module (gnu packages libreoffice)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages kde)
  #:use-module (gnu packages image)
  #:use-module (gnu packages image-viewers)
  #:use-module (gnu packages inkscape)
  #:use-module (gnu packages music)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages qt)
  #:use-module (gnu packages terminals)
  #:use-module (gnu packages virtualization)
  #:use-module (gnu packages web)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages xdisorg)
  #:use-module (gnu packages xorg)
  #:use-module (nongnu packages mozilla)
#+end_src

For emacs packages (later to be provided by the emacs service):
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for emacs packages
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages emacs-xyz)
  #:use-module (gnu packages cmake)
  #:use-module (gnu packages llvm)
#+end_src

For engineering packages:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for engineering packages
  #:use-module (gnu packages engineering)
  #:use-module (gnu packages electronics)
#+end_src

For latex packages:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for latex packages
  #:use-module (gnu packages tex)
  #:use-module (gnu packages texlive)
#+end_src

For miscellaneous packages:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for misc packages
  #:use-module (gnu packages algebra)
  #:use-module (gnu packages astronomy)
  #:use-module (gnu packages plan9)
#+end_src

For NVIDIA packages:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for nvidia packages
  #:use-module (nongnu packages nvidia)
#+end_src

For programming packages:
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for programming packages
  #:use-module (gnu packages base)
  #:use-module (gnu packages cmake)
  #:use-module (gnu packages commencement)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages m4)
  #:use-module (gnu packages rust)
  #:use-module (gnu packages rust-apps)
  #:use-module (gnu packages python)
  #:use-module (gnu packages qt)
  #:use-module (gnu packages valgrind)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages embedded)
#+end_src

For my own package definitions
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  ;; for wyvernh packages
  ;#:use-module (wyvernh packages cognition)
  ;#:use-module (wyvernh packages cogsh)
#+end_src

And finally we export the environment so that it can be passed to ~eval-reduce~ in
~home.scm~
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  #:export (packages-environment))
#+end_src

Now we list all the package sets and bind them to symbols.
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  (define core
    (list htop
          neofetch
          zstd
          zip
          unzip
          openssh
          openssl
          arp-scan
          nano
          evtest
          colordiff))

  (define desktop
    (list ;musescore
          firefox
          ;alacritty
          ;pavucontrol
          ;libreoffice
          ;font-fira-code
          ;font-liberation
          ;font-gnu-freefont
          ;fontconfig
          ;gimp
          ;krita
          ;inkscape
          ;blender
          nsxiv
          ;qemu
          android-file-transfer
          cups
          gtk
          gtk+
          gtkdatabox
          qt5compat
          alsa-utils
          sway
          swayidle
          swaylock
          fuzzel
          grim
          xdg-desktop-portal
          xdg-desktop-portal-wlr
          xdg-desktop-portal-gtk
          wtype
          font-hack
          playerctl
          waybar
          waybar-cpu-histogram
          xorg-server-xwayland

          emacs-next-pgtk))

  (define emacs
    (list emacs-next-pgtk
          emacs-general
          emacs-which-key
          emacs-hydra

          emacs-org
          emacs-org-modern
          emacs-org-pomodoro
          emacs-org-make-toc
          emacs-org-present
          emacs-org-roam
          emacs-org-appear
          emacs-org-ql
          emacs-ob-async

          emacs-auctex
          emacs-latex-preview-pane
          ;emacs-latex-extra
          emacs-cdlatex

          emacs-lsp-mode
          emacs-lsp-treemacs
          emacs-lsp-ui

          emacs-cmake-mode

          emacs-csv-mode
          emacs-gnuplot
          emacs-cc-mode
          emacs-clang-format
          emacs-rustic
          ;emacs-ligature
          emacs-doom-modeline
          ;emacs-ligature
          emacs-doom-modeline

          emacs-solaire-mode
          emacs-doom-themes
          emacs-rainbow-delimiters

          emacs-magit

          emacs-geiser

          emacs-guix

          emacs-vterm

          emacs-elfeed))

  (define engineering
    (list kicad
          freecad
          ;;cura
          prusa-slicer
          xoscope))

  (define latex
    (list texlive-tex-gyre-math
          texlive-scheme-basic
          texlive-enumitem
          texlive-preprint
          texlive-anyfontsize
          texlive-diagbox
          texlive-pict2e
          texlive-pgf
          texlive-darkmode))

  (define misc
    (list drawterm-wayland
          calceph
          fftw))

  (define nvidia
    (list nvidia-htop))

  (define programming
    (list perf
          valgrind
          python
          python-pyqt
          gnu-make
          cmake
          gcc-toolchain
          pkg-config
          m4
          rust
          ;rust-cargo
          ;(make-arm-none-eabi-toolchain-12.3.rel1)
    ))

  (define wyvernh
    (list ;cognition-0.3 cogsh))
     ))
#+end_src

Now that all the symbols have been bound, we can defined ~packages-environment~.
#+begin_src scheme :tangle ./wyvernh/modules/home/packages.scm
  (define packages-environment (interaction-environment))
#+end_src

*** Home Services
Similarly, we have a home services file.
#+begin_src scheme :tangle ./wyvernh/modules/home/services.scm
  (define-module (wyvernh modules home services)
    #:use-module (wyvernh modules home services desktop)
    #:use-module (wyvernh modules home services emacs)
    #:use-module (gnu home services)
    #:use-module (gnu home services desktop)
    #:use-module (gnu home services shepherd)
    #:use-module (gnu home services sound)
    #:export (services-environment))

  (define desktop
    (list (service home-dbus-service-type)
          (service home-pipewire-service-type)
          (service wyvernh-sway-service-type)
          (service wyvernh-wayland-service-type)))

  (define emacs
    (list (service home-emacs-server-service-type)))

  (define shepherd
    (list (service home-shepherd-service-type)))

  (define programming
    (list (simple-service 'env-vars-service
                          home-environment-variables-service-type
                          `(("PATH" . "$PATH:$HOME/.cargo/bin")))))

  (define services-environment (interaction-environment))
#+end_src

Along with this, we have a few scheme files in which we define custom services used in
~services.scm~.

*desktop.scm*
#+begin_src scheme :tangle ./wyvernh/modules/home/services/desktop.scm
  (define-module (wyvernh modules home services desktop)
    #:use-module (gnu home services)
    #:use-module (gnu services)
    #:use-module (gnu services configuration)
    #:use-module (guix gexp))

  (define (wyvernh-wayland-environment-service _)
    '(("QT_QPA_PLATFORM" . "wayland")
      ("MOZ_ENABLE_WAYLAND" . "1")
      ("SDL_VIDEODRIVER" . "wayland")
      ("XDG_SESSION_TYPE" . "wayland")))

  (define-public wyvernh-wayland-service-type
    (service-type
     (name 'wyvernh-wayland-service)
     (extensions
      (list (service-extension home-environment-variables-service-type
                               wyvernh-wayland-environment-service)))
     (default-value #f)
     (description "Configure wayland.")))

  (define (wyvernh-sway-environment _)
    '(("XDG_CURRENT_DESKTOP" . "sway")))

  (define-public wyvernh-sway-service-type
    (service-type
     (name 'wyvernh-sway-service)
     (extensions
      (list (service-extension home-environment-variables-service-type
                               wyvernh-sway-environment)))
     (default-value #f)
     (description "Configure sway.")))
#+end_src

*emacs.scm*
#+begin_src scheme :tangle ./wyvernh/modules/home/services/emacs.scm
  (define-module (wyvernh modules home services emacs)
    #:use-module (gnu home services shepherd)
    #:use-module (gnu services)
    #:use-module (gnu services configuration)
    #:use-module (guix gexp))

  (define (emacs-server-shepherd-service config)
    (list (shepherd-service
           (documentation "Emacs server.")
           (provision '(emacs-server))
           (start #~(make-forkexec-constructor
                     (list #$(file-append emacs "/bin/emacs")
                           "--fg-daemon")))
           (stop #~(make-kill-destructor)))))

  (define-public home-emacs-server-service-type
    (service-type
     (name 'home-emacs-server)
     (extensions (list (service-extension home-shepherd-service-type
                                          emacs-server-shepherd-service)))
     (default-value #f)
     (description "Run Emacs in server mode.")))
#+end_src


** System
The home module just builds home environments from lists of packages and services. The
system configuration module is more sophisticated and extensible, and has far more
customisable fields. The procedure ~system-config~ also returns a disk object. It is
recommended to end a system configuration with with a call to ~system-config~, as the
MHDisk utility expects a file that evaluates to the type of disk object ~system-config~
returns.

*** TODO document this section

#+begin_src scheme :tangle ./wyvernh/modules/system.scm
  (define-module (wyvernh modules system)
    #:use-module (wyvernh modules tools)
    #:use-module (wyvernh modules system kernel-lm)
    #:use-module (wyvernh modules system kernel-arg)
    #:use-module (wyvernh modules system firmware)
    #:use-module (wyvernh modules system filesystems)
    #:use-module (wyvernh modules system users)
    #:use-module (wyvernh modules system packages)
    #:use-module (wyvernh modules system services)
    #:use-module (gnu)
    #:use-module (gnu packages linux)
    #:use-module (gnu system)
    #:use-module (gnu system linux-initrd)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd)
    #:export (os disk system-config))

  (define default-timezone "America/Vancouver")
  (define default-locale "en_CA.utf8")
  (define default-kernel 'linux)
  (define default-initrd 'microcode-initrd)
  (define default-hardware '())
  (define default-firmware '(linux-firmware))
  (define default-drive "/dev/nvme0n1")
  (define default-filesystems
    '((fs-efi #:size (* 500 MiB) #:type "vfat")
      (fs-root #:size (* 100 GiB) #:type "btrfs")
      (fs-swap #:size (* 18 GiB))
      (fs-home #:size 'guess #:type "btrfs")))
  (define default-users '((desktop-user "matthew" "Matthew Hinton")))
  (define default-groups '(plugdev uinput))
  (define default-packages '(core extras))
  (define default-services '(kmonad desktop autologin substitutes))

  (define (get-hostname)
    (symbol->string (car (last-pair (module-name (current-module))))))

  (define default-operating-system
    (operating-system
     (host-name "wyvernh")
     (kernel linux)
     (keyboard-layout (keyboard-layout "us"))
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (targets '("/efi"))
                  (keyboard-layout keyboard-layout)))
     (file-systems %base-file-systems)
     (name-service-switch %mdns-host-lookup-nss)))

  (define os #f)
  (define disk #f)

  (define current-env (interaction-environment))

  ;; returns disk so that the mhdisk program can directly load
  ;; a system config file ending with a call to system-config
  (define system-config
    (lambda*
     (#:key
      (timezone default-timezone)
      (locale default-locale)
      (kernel default-kernel)
      (initrd default-initrd)
      (kernel-loadable-modules '())
      (kernel-arguments '())
      (hardware default-hardware)
      (firmware default-firmware)
      (drive default-drive)
      (filesystems default-filesystems)
      (users default-users)
      (groups default-groups)
      (channels '())
      (packages default-packages)
      (services default-services))

     (define svcs
       (services-from services channels hardware
                      (users-from users) (list-copy packages)))

     (set!
      os
      (operating-system
       (inherit default-operating-system)
       (host-name (get-hostname))
       (timezone timezone)
       (locale locale)
       (kernel (eval kernel current-env))
       (initrd (eval initrd current-env))
       (kernel-loadable-modules
        (eval-reduce (append kernel-loadable-modules hardware) kernel-lm-env))
       (kernel-arguments
        (append %default-kernel-arguments
                (eval-reduce (append kernel-arguments hardware) kernel-arg-env)))
       (firmware
        (eval-reduce (append firmware hardware) firmware-env))
       (file-systems (filesystems-from filesystems))
       (swap-devices (swap-devices-from filesystems '()))
       (users (users-from users))
       (groups (groups-from groups users))
       (packages (packages-from packages))
       (services svcs)))

     (set! disk (disk-from filesystems drive))

     disk))

  (system-config)
#+end_src

*** Channels
#+begin_src scheme :tangle ./wyvernh/modules/system/channels.scm
  (define-module (wyvernh modules system channels)
    #:use-module (guix channels))

  (define-public %wyvernh-base-channels
    (list (channel
           (name 'mhguix)
           (url "https://github.com/wyvernh/mhguix")
           (branch "master")
           (commit
            "02d09da886abb14a37b7025616d752ff1e184f62"))
          (channel
           (name 'nonguix)
           (url "https://gitlab.com/nonguix/nonguix")
           (branch "master")
           (commit
            "df4e6ed9fe917f004357d931e210e328e348bb38")
           (introduction
            (make-channel-introduction
             "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
             (openpgp-fingerprint
              "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
          (channel
           (name 'guix)
           (url "https://git.guix.gnu.org/guix.git")
           (branch "master")
           (commit
            "94ec8623a86e49beb0f80415a1fc194b8498dc9a")
           (introduction
            (make-channel-introduction
             "9edb3f66fd807b096b48283debdcddccfea34bad"
             (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))))

  (define-public %wyvernh-channels
    (list (channel
           (name 'guix-science-nonfree)
           (url "https://codeberg.org/guix-science/guix-science-nonfree.git")
           (branch "master")
           (commit
            "d87f5c1b09f287f798268751e2d14f8c2b3453da")
           (introduction
            (make-channel-introduction
             "58661b110325fd5d9b40e6f0177cc486a615817e"
             (openpgp-fingerprint
              "CA4F 8CF4 37D7 478F DA05  5FD4 4213 7701 1A37 8446"))))
          (channel
           (name 'guix-science)
           (url "https://codeberg.org/guix-science/guix-science.git")
           (branch "master")
           (commit
            "d65eb0f1f8e65f9d5e34b4f14e5573a793d8d07e")
           (introduction
            (make-channel-introduction
             "b1fe5aaff3ab48e798a4cce02f0212bc91f423dc"
             (openpgp-fingerprint
              "CA4F 8CF4 37D7 478F DA05  5FD4 4213 7701 1A37 8446"))))
          (channel
           (name 'guix-past)
           (url "https://codeberg.org/guix-science/guix-past.git")
           (branch "master")
           (commit
            "b14d7f997ae8eec788a7c16a7252460cba3aaef8")
           (introduction
            (make-channel-introduction
             "0c119db2ea86a389769f4d2b9c6f5c41c027e336"
             (openpgp-fingerprint
              "3CE4 6455 8A84 FDC6 9DB4  0CFB 090B 1199 3D9A EBB5"))))))
#+end_src

Returning this list allows us to run ~guix pull --channels=/path/to/channels.scm~ followed
by ~guix describe --format=channels~ to get the most recent commits for each channel.
#+begin_src scheme :tangle ./wyvernh/modules/system/channels.scm
  (list (channel
         (name 'mhguix)
         (url "https://github.com/wyvernh/mhguix"))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix"))
        (channel
         (name 'guix)
         (url "https://git.guix.gnu.org/guix.git"))
        (channel
         (name 'guix-science-nonfree)
         (url "https://codeberg.org/guix-science/guix-science-nonfree.git"))
        (channel
         (name 'guix-science)
         (url "https://codeberg.org/guix-science/guix-science.git"))
        (channel
         (name 'guix-past)
         (url "https://codeberg.org/guix-science/guix-past.git")))
#+end_src

*** Filesystems
#+begin_src scheme :tangle ./wyvernh/modules/system/filesystems.scm
  (define-module (wyvernh modules system filesystems)
    #:use-module (wyvernh modules tools)
    #:use-module (gnu)
    #:use-module (gnu image)
    #:use-module (gnu system file-systems)
    #:export (filesystems-from swap-devices-from disk-from))

  (define (no-fs size type label has-swap)
    (list (cons 'size size)
          (cons 'type type)
          (cons 'label label)
          (cons 'swap has-swap)))

  (define (simple-fs mount-point size type label)
    (acons 'fs
           (file-system
            (mount-point mount-point)
            (type type)
            (device (file-system-label label)))
           (no-fs size type label #f)))

  (define KiB (expt 2 10))
  (define MiB (expt 2 20))
  (define GiB (expt 2 30))

  (define* (fs-efi #:key (size (* 500 MiB)) (type "vfat") (label "EFI SYSTEM"))
    (simple-fs "/efi" size type label))

  (define* (fs-root #:key (size (*100 GiB)) (type "ext4") (label "Guix"))
    (simple-fs "/" size type label))

  (define* (fs-gnu #:key (size (* 100 GiB)) (type "ext4") (label "GNU"))
    (simple-fs "/gnu" size type label))

  (define* (fs-swap #:key (size (* 18 GiB)) (type "linux-swap") (label "Swap"))
    (no-fs size type label #t))

  (define* (fs-home #:key (size 'guess) (type "ext4") (label "HOME"))
    (simple-fs "/home" size type label))

  (define* (fs-other #:key size (label #f) (type "ext4") (swap #f))
    (no-fs size type label swap))

  (define current-env (interaction-environment))

  (define (fs-list-from lst)
    (eval-map lst current-env))

  (define (gnu-fs-from alist)
    (assoc-ref alist 'fs))

  (define (filesystems-from lst)
    (append (remove-false (map gnu-fs-from (fs-list-from lst))) %base-file-systems))

  (define (gnu-sd-from alist mapped-devices)
    (if (assoc-ref alist 'swap)
        (swap-space
         (target (file-system-label (assoc-ref alist 'label)))
         (dependencies mapped-devices))
        #f))

  (define (swap-devices-from lst mapped-devices)
    (remove-false
     (map (lambda (alist) (gnu-sd-from alist mapped-devices))
          (fs-list-from lst))))

  (define (rootlabel fs)
    (if fs
        (if (string=? "/" (file-system-mount-point fs))
            (file-system-label->string (file-system-device fs))
            #f)
        #f))

  (define (get-root-label lst)
    (if (null? lst)
        #f
        (let ((label (rootlabel (assoc-ref (car lst) 'fs))))
          (if label
              label
              (get-root-label (cdr lst))))))

  (define (disk-layout-from lst)
    (map (lambda (alist) (partition
                     (size (assoc-ref alist 'size))
                     (label (assoc-ref alist 'label))
                     (file-system (assoc-ref alist 'type))))
         (fs-list-from lst)))

  (define (disk-from lst drive)
    (list drive (get-root-label (fs-list-from lst)) (disk-layout-from lst)))
#+end_src

*** Firmware
#+begin_src scheme :tangle ./wyvernh/modules/system/firmware.scm
  (define-module (wyvernh modules system firmware)
    #:export (firmware-env))

  (define intel '())
  (define amd '())
  (define nvidia '("modprobe.blacklist=nouveau"
                   "nvidia_drm.modeset=1"
                   "nvidia.NVreg_PreserveVideoMemoryAllocations=0"))
  (define amdgpu '())
  (define linux-firmware (list (@ (nongnu packages linux) linux-firmware)))

  (define firmware-env (interaction-environment))
#+end_src

*** Kernel Command Line
#+begin_src scheme :tangle ./wyvernh/modules/system/kernel-arg.scm
  (define-module (wyvernh modules system kernel-arg)
    #:export (kernel-arg-env))

  (define intel '())
  (define amd '())
  (define nvidia '("modprobe.blacklist=nouveau"
                   "nvidia_drm.modeset=1"
                   "nvidia.NVreg_PreserveVideoMemoryAllocations=0"))
  (define amdgpu '())

  (define kernel-arg-env (interaction-environment))
#+end_src

*** Kernel Loadable Modules
#+begin_src scheme :tangle ./wyvernh/modules/system/kernel-lm.scm
  (define-module (wyvernh modules system kernel-lm)
    #:export (kernel-lm-env))

  (define intel '())
  (define amd '())
  (define nvidia '())
  (define amdgpu '())

  (define kernel-lm-env (interaction-environment))
#+end_src

*** System Packages
#+begin_src scheme :tangle ./wyvernh/modules/system/packages.scm
  (define-module (wyvernh modules system packages)
    #:use-module (wyvernh modules tools)
    #:use-module (gnu)
    #:use-module (gnu packages audio)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages haskell-apps)
    #:use-module (gnu packages package-management)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages version-control)
    #:export (packages-from))

  (define core
    (list emacs-no-x-toolkit
          git))

  (define extras
    (list bluez
          bluez-alsa
          brightnessctl
          kmonad
          ntfs-3g
          stow))

  (define current-env (interaction-environment))

  (define (packages-from lst)
    (append (eval-reduce lst current-env) %base-packages))
#+end_src

*** System Services
Like in the home module, services can add packages using ~proile-service-type~ for root
packages. So the ~packages~ argument to ~services-from~ only merely needs to add channels.
#+begin_src scheme :tangle ./wyvernh/modules/system/services.scm
  (define-module (wyvernh modules system services)
    #:use-module (wyvernh modules tools)
    #:use-module (wyvernh modules system channels)
    #:use-module (wyvernh modules system services kmonad)
    #:use-module (gnu)
    #:use-module (gnu packages admin)
    #:use-module (gnu packages avahi)
    #:use-module (gnu packages cups)
    #:use-module (gnu packages fonts)
    #:use-module (gnu packages freedesktop)
    #:use-module (gnu packages glib)
    #:use-module (gnu packages gnome)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages libusb)
    #:use-module (gnu packages nfs)
    #:use-module (gnu packages pulseaudio)
    #:use-module (gnu packages scanner)
    #:use-module (gnu packages suckless)
    #:use-module (gnu packages sugar)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages xdisorg)
    #:use-module (gnu services)
    #:use-module (gnu services avahi)
    #:use-module (gnu services base)
    #:use-module (gnu services dbus)
    #:use-module (gnu services desktop)
    #:use-module (gnu services linux)
    #:use-module (gnu services networking)
    #:use-module (gnu services shepherd)
    #:use-module (gnu services sound)
    #:use-module (gnu services xorg)
    #:use-module (gnu system privilege)
    #:use-module (nongnu packages nvidia)
    #:use-module (nongnu services nvidia)
    #:use-module (guix channels)
    #:use-module (srfi srfi-1)
    #:export (services-from))

  (define %wyvernh-base-services
    (modify-services
     %base-services
     (console-font-service-type
      config => (map (lambda (tty)
                       (cons tty (file-append font-terminus
                                              "/share/consolefonts/ter-132n")))
                     '("tty1" "tty2" "tty3" "tty4" "tty5" "tty6")))))

  (define kmonad
   (lambda (lst _)
     (cons
      (kmonad-service "/root/.config/kmonad/config.kbd")
      (modify-services
       lst
       (udev-service-type
        config => (udev-configuration
                   (inherit config)
                   (rules (cons (@ (gnu packages haskell-apps) kmonad)
                                (udev-configuration-rules config)))))))))

  (define autologin
    (lambda (lst users)
      (if (zero? (length users))
          lst
          (let ((name (user-account-name (car users))))
            (modify-services
             lst
             (mingetty-service-type
              config => (if (string=? "tty1" (mingetty-configuration-tty config))
                            (mingetty-configuration
                             (inherit config)
                             (auto-login name))
                            config)))))))

  (define %swaylock-service
    (service
     screen-locker-service-type
     (screen-locker-configuration
      (name "swaylock")
      (program swaylock)
      (using-pam? #t)
      (using-setuid? #f))))

  (define desktop
    (lambda (lst _)
      (cons*
       %swaylock-service
       (udev-rules-service 'pipewire-add-udev-rules pipewire)
       ;; Add udev rules for MTP devices so that non-root users can access
       ;; them.
       (simple-service 'mtp udev-service-type (list libmtp))
       ;; Add udev rules for scanners.
       (service sane-service-type)
       ;; Add polkit rules, so that non-root users in the wheel group can
       ;; perform administrative tasks (similar to "sudo").
       polkit-wheel-service

       ;; Allow desktop users to also mount NTFS and NFS file systems
       ;; without root.
       (simple-service 'mount-setuid-helpers privileged-program-service-type
                       (map file-like->setuid-program
                            (list (file-append nfs-utils "/sbin/mount.nfs")
                                  (file-append ntfs-3g "/sbin/mount.ntfs-3g"))))

       ;; Add some of the artwork niceties for the desktop.
       (simple-service 'guix-artwork
                       profile-service-type
                       %base-packages-artwork)

       ;; Provides a nicer experience for VTE-using terminal emulators
       (service vte-integration-service-type)

       ;; The global fontconfig cache directory can sometimes contain
       ;; stale entries, possibly referencing fonts that have been GC'd,
       ;; so mount it read-only.
       fontconfig-file-system-service

       ;; NetworkManager and its applet.
       (service network-manager-service-type)
       (service wpa-supplicant-service-type)    ;needed by NetworkManager
       (simple-service 'network-manager-applet
                       profile-service-type
                       (list network-manager-applet))
       (service modem-manager-service-type)
       (service usb-modeswitch-service-type)

       ;; The D-Bus clique.
       (service avahi-service-type)
       (service udisks-service-type)
       (service upower-service-type)
       (service accountsservice-service-type)
       (service cups-pk-helper-service-type)
       (service colord-service-type)
       (service geoclue-service-type)
       (service polkit-service-type)
       (service elogind-service-type)
       (service dbus-root-service-type)

       (service ntp-service-type)

       (service x11-socket-directory-service-type)

       (service pulseaudio-service-type)
       (service alsa-service-type)

       lst)))

  (define substitutes
    (lambda (lst _)
      (modify-services
       lst
       (guix-service-type
        config => (guix-configuration
                   (inherit config)
                   (substitute-urls
                    (append (list "https://substitutes.nonguix.org")
                            %default-substitute-urls))
                   (authorized-keys
                    (append
                     (list
                      (plain-file "non-guix.pub"
                                  "\
  (public-key
   (ecc
    (curve Ed25519)
    (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)))"))
                     %default-authorized-guix-keys)))))))

  ;; CHANNELS OPTIONS

  (define (add-channels channels lst)
    (modify-services
     lst
     (guix-service-type
      config => (guix-configuration (inherit config) (channels channels)))))

  ;; HARDWARE OPTIONS

  (define intel (lambda (lst _) lst))

  (define amd (lambda (lst _) lst))

  (define nvidia
    (lambda (lst _)
      (cons*
       (service nvidia-service-type)
       (simple-service
        'custom-udev-rules udev-service-type
        (list nvidia-driver))
       (service kernel-module-loader-service-type
                '("ipmi_devintf"
                  "nvidia"
                  "nvidia_modeset"
                  "nvidia_uvm"))
       lst)))

  (define amdgpu (lambda (lst _) lst))

  ;; PACKAGE CHANNELS

  (define core '())
  (define extras '())

  ;; Build services-from

  (define current-env (interaction-environment))

  (define (get-lambdas sources)
    (map (lambda (datum) (if (symbol? datum) (eval datum current-env) datum)) sources))

  (define (apply-lambdas sources users lst)
    (fold (lambda (proc l) (apply proc (list l users))) lst (get-lambdas sources)))

  (define (get-channel-from symbol)
    (find (lambda (e) (eq? symbol (channel-name e))) %wyvernh-channels))

  (define (get-channels lst)
    (map get-channel-from (delete-duplicates lst eq?)))

  (define (channel-list channels packages)
    (append (get-channels (append channels (eval-reduce packages current-env)))
            %wyvernh-base-channels))

  (define (services-from svcs channels hardware users packages)
    (add-channels
     (channel-list channels packages)
     (apply-lambdas hardware users
                    (apply-lambdas svcs users %wyvernh-base-services))))
#+end_src

*kmonad.scm*
#+begin_src scheme :tangle ./wyvernh/modules/system/services/kmonad.scm
  (define-module (wyvernh modules system services kmonad)
    ;#:use-module (wyvernh packages kmonad)
    #:use-module (gnu packages haskell-apps)
    #:use-module (gnu services)
    #:use-module (gnu services shepherd)
    #:use-module (guix gexp)
    #:export (kmonad-service))

  (define (kmonad-package-list _)
    (list kmonad))
  ;;        kmonad-config))

  (define (kmonad-shepherd-service config-path)
    ;; Tells shepherd how we want it to create a (single) <shepherd-service>
    ;; for kmonad from a string
    (list (shepherd-service
            (documentation "Run the kmonad daemon (kmonad-daemon).")
            (provision '(kmonad-daemon))
            (requirement '(udev user-processes))
            (start #~(make-forkexec-constructor
                      (list #$(file-append kmonad "/bin/kmonad")
                            ;; TODO: replace with
                            ;; #$(file-append kmonad-config "/config.kbd"
                            ;; once a package for my kmonad config exists
                            #$config-path)))
            (stop #~(make-kill-destructor)))))

  (define kmonad-service-type
    ;; Extend the shepherd root into a new type of service that takes a single string
    (service-type
     (name 'kmonad)
     (description
      "Run kmonad as a daemon.")
     (extensions
      (list (service-extension shepherd-root-service-type
                               kmonad-shepherd-service)
            (service-extension profile-service-type
                               kmonad-package-list)))))

  (define (kmonad-service config-path)
    ;; Create a service from our service type, which takes a single parameter
    (service kmonad-service-type config-path))
#+end_src

*** User Accounts
#+begin_src scheme :tangle ./wyvernh/modules/system/users.scm
  (define-module (wyvernh modules system users)
    #:use-module (wyvernh modules tools)
    #:use-module (gnu)
    #:use-module (gnu packages shells)
    #:use-module (srfi srfi-1)
    #:export (users-from groups-from))

  (define (build-user name full-name group gps)
    (let ((base-user
           (user-account
            (name name)
            (group group)
            (supplementary-groups gps))))
      (if full-name
          (user-account (inherit base-user) (comment full-name))
          base-user)))

  (define* (basic-user name #:optional full-name)
    (build-user name full-name "users" '("audio" "users" "wheel")))

  (define* (desktop-user name #:optional full-name)
    (build-user name full-name name '("audio" "input" "kvm" "netdev" "plugdev" "users" "video" "wheel")))

  (define plugdev
    (user-group
     (name "plugdev")
     (system? #t)))

  (define uinput
    (user-group
     (name "uinput")
     (system? #t)))

  (define current-env (interaction-environment))

  (define (users-from lst)
    (append (eval-map lst current-env) %base-user-accounts))

  (define (user->group user)
    (user-group (name (user-account-group user))))

  (define (user-groups users)
    (map user->group (users-from users)))

  (define (groups-from groups users)
    (delete-duplicates
     (append %base-groups (eval-map groups current-env) (user-groups users))
     (lambda (gp1 gp2) (string=? (user-group-name gp1) (user-group-name gp2)))))
#+end_src


* Systems

** baywyvernh
#+begin_src scheme :tangle ./wyvernh/systems/baywyvernh.scm
  (define-module (wyvernh systems baywyvernh)
    #:use-module (wyvernh modules home)
    #:use-module (wyvernh modules system)
    #:re-export (home os disk))

  (home-config
   ;#:packages '(core wyvernh latex emacs engineering)
   #:packages '(core desktop)
   #:services '(desktop shepherd))

  (system-config
   ;#:hardware '(nvidia)
   #:filesystems '((fs-efi #:size (* 1899 MiB) #:type "vfat")
                   (fs-other #:size (* 16 MiB))
                   (fs-other #:size (* 64 GiB))
                   (fs-root #:size (* 128 GiB) #:type "btrfs")
                   (fs-other #:size (* 128 GiB) #:type "ext4" #:label "Nix")
                   (fs-swap #:size (* 32 GiB))
                   (fs-home #:size 'guess #:type "btrfs"))
   #:channels '(guix-science-nonfree)
   #:services '(kmonad desktop substitutes))
#+end_src

** iso
#+begin_src scheme :tangle ./wyvernh/systems/iso.scm
  (define-module (wyvernh systems iso)
    #:use-module (wyvernh modules home)
    #:use-module (wyvernh modules system)
    #:use-module (gnu image)
    #:use-module (gnu system image)
    ;#:use-module (guix gexp)
    #:re-export (os))

  (system-config
   ;#:filesystems '((fs-efi #:size (* 40 MiB) #:label "ISO_ESP")
   ;                (fs-root #:size 'guess #:label "ISO_Root" #:type "ext4"))
   #:filesystems '((fs-root #:size 'guess #:type "iso9660" #:label "GUIX_IMAGE"))
   #:users '((basic-user "iso"))
   #:groups '()
   #:channels '(guix-science-nonfree)
   #:packages '(core)
   #:services '(autologin substitutes))

  (os->image os #:type iso-image-type)

  ;(image
  ; (inherit efi-disk-image)
  ; (operating-system os)
  ; (partitions
  ;  (list (partition
  ;         (inherit esp-partition)
  ;         (label "ISO_ESP"))
  ;        (partition
  ;         (size (* 50 (expt 2 20)))
  ;         (label "ISO_Data")
  ;         (file-system "ext4")
  ;         (initializer
  ;          #~(lambda* (root . rest)
  ;                     (mkdir root)
  ;                     (call-with-output-file
  ;                         (string-append root "/data")
  ;                       (lambda (port)
  ;                         (format port "my-data"))))))
  ;        (partition
  ;         (inherit root-partition)
  ;         (label "ISO_Root")))))
#+end_src


* Packages

Currently no working package definitions.

** TODO
kmonad config
emacs config
cognition
cogsh
ollama-cuda
